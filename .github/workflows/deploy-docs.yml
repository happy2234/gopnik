name: Deploy Documentation to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'wiki/**'
      - 'README.md'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt
        pip install -e .

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Build Sphinx documentation
      run: |
        cd docs
        
        # Create _static directory if it doesn't exist
        mkdir -p _static
        
        # Build documentation with verbose output
        make html
        
        # Copy built docs to _site for GitHub Pages
        mkdir -p _site
        cp -r _build/html/* _site/
        
        # Create index.html redirect if needed
        if [ ! -f _site/index.html ]; then
          echo '<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0; url=./index.html"></head><body></body></html>' > _site/index.html
        fi

    - name: Copy additional documentation
      run: |
        # Copy wiki content
        mkdir -p docs/_site/wiki
        cp wiki/*.md docs/_site/wiki/ || true
        
        # Copy README as additional content
        cp README.md docs/_site/readme.md || true

    - name: Update GitHub Wiki
      run: |
        echo "üîÑ Updating GitHub Wiki..."
        
        # Clone wiki repository
        git clone https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki-repo || {
          echo "‚ö†Ô∏è Wiki not enabled or accessible, skipping wiki update"
          exit 0
        }
        
        cd wiki-repo
        
        # Function to check if file should be ignored
        should_ignore_file() {
          local filename="$1"
          local gitignore_file="../wiki/.gitignore"
          
          # If no .gitignore exists, don't ignore anything
          if [ ! -f "$gitignore_file" ]; then
            return 1
          fi
          
          # Check each pattern in .gitignore
          while IFS= read -r pattern || [ -n "$pattern" ]; do
            # Skip empty lines and comments
            if [[ -z "$pattern" || "$pattern" =~ ^[[:space:]]*# ]]; then
              continue
            fi
            
            # Remove leading/trailing whitespace
            pattern=$(echo "$pattern" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            # Skip empty patterns
            if [[ -z "$pattern" ]]; then
              continue
            fi
            
            # Use case statement for better pattern matching
            case "$filename" in
              $pattern)
                return 0
                ;;
            esac
          done < "$gitignore_file"
          
          return 1
        }
        
        # Copy updated wiki content (respecting .gitignore)
        for file in ../wiki/*.md; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            
            # Direct check for files that should be excluded
            case "$filename" in
              "Wiki-Setup-Troubleshooting.md"|*troubleshooting*|*Troubleshooting*|*-dev.md|*-internal.md|*-draft.md|*-wip.md|*-private.md|*-secret.md|*-config.md|*-credentials.md|TODO.md|NOTES.md|SCRATCH.md)
                echo "‚è≠Ô∏è Skipping $filename (excluded from public wiki)"
                continue
                ;;
            esac
            
            # Also check .gitignore file if it exists
            if should_ignore_file "$filename"; then
              echo "‚è≠Ô∏è Skipping $filename (ignored by .gitignore)"
              continue
            fi
            
            cp "$file" "$filename"
            git add "$filename"
            echo "‚úÖ Updated $filename in wiki"
          fi
        done
        
        # Check if there are changes to commit
        if ! git diff --staged --quiet; then
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "üìö Auto-update wiki from documentation build
          
          Updated from main repository commit: ${{ github.sha }}
          Triggered by documentation deployment"
          
          git push origin master
          echo "üöÄ Wiki updated successfully!"
        else
          echo "‚ÑπÔ∏è No wiki changes to commit"
        fi
        
        cd ..
        rm -rf wiki-repo

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4