name: Setup GitHub Wiki

on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update existing wiki pages'
        required: false
        default: 'false'
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'wiki/**'
      - '.github/workflows/setup-wiki.yml'

jobs:
  setup-wiki:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN }}

    - name: Setup Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Check if wiki exists and is accessible
      id: check_wiki
      run: |
        # Try to clone the wiki repository
        if git clone https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki-repo 2>/dev/null; then
          echo "wiki_exists=true" >> $GITHUB_OUTPUT
          echo "✅ Wiki repository exists and is accessible"
        else
          echo "wiki_exists=false" >> $GITHUB_OUTPUT
          echo "❌ Wiki repository does not exist or is not accessible"
          echo "Please enable Wiki in repository settings first:"
          echo "1. Go to https://github.com/${{ github.repository }}/settings"
          echo "2. Scroll to 'Features' section"
          echo "3. Check the 'Wikis' checkbox"
          echo "4. Save changes"
          exit 1
        fi

    - name: Setup wiki content
      if: steps.check_wiki.outputs.wiki_exists == 'true'
      run: |
        cd wiki-repo
        
        echo "📝 Setting up wiki pages..."
        
        # Function to check if file should be ignored
        should_ignore_file() {
          local filename="$1"
          local gitignore_file="../wiki/.gitignore"
          
          # If no .gitignore exists, don't ignore anything
          if [ ! -f "$gitignore_file" ]; then
            return 1
          fi
          
          # Debug: show what we're checking
          echo "🔍 Checking if $filename should be ignored..."
          
          # Check each pattern in .gitignore
          while IFS= read -r pattern || [ -n "$pattern" ]; do
            # Skip empty lines and comments
            if [[ -z "$pattern" || "$pattern" =~ ^[[:space:]]*# ]]; then
              continue
            fi
            
            # Remove leading/trailing whitespace
            pattern=$(echo "$pattern" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            # Skip empty patterns
            if [[ -z "$pattern" ]]; then
              continue
            fi
            
            echo "  📋 Checking pattern: '$pattern'"
            
            # Use case statement for better pattern matching
            case "$filename" in
              $pattern)
                echo "  ✅ Match found: $filename matches $pattern"
                return 0
                ;;
            esac
          done < "$gitignore_file"
          
          echo "  ❌ No match found for $filename"
          return 1
        }
        
        # Copy all wiki files from the main repository (respecting .gitignore)
        for file in ../wiki/*.md; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            
            # Direct check for files that should be excluded
            case "$filename" in
              "Wiki-Setup-Troubleshooting.md"|*troubleshooting*|*Troubleshooting*|*-dev.md|*-internal.md|*-draft.md|*-wip.md|*-private.md|*-secret.md|*-config.md|*-credentials.md|TODO.md|NOTES.md|SCRATCH.md)
                echo "⏭️ Skipping $filename (excluded from public wiki)"
                continue
                ;;
            esac
            
            # Also check .gitignore file if it exists
            if should_ignore_file "$filename"; then
              echo "⏭️ Skipping $filename (ignored by .gitignore)"
              continue
            fi
            
            echo "Processing $filename..."
            
            # Convert filename to wiki format (replace spaces and special chars)
            wiki_name=$(echo "$filename" | sed 's/\.md$//' | sed 's/-/ /g')
            
            # Check if file already exists and force_update is false
            if [ -f "$filename" ] && [ "${{ github.event.inputs.force_update }}" != "true" ]; then
              echo "⏭️  Skipping $filename (already exists, use force_update to overwrite)"
              continue
            fi
            
            # Copy the file
            cp "$file" "$filename"
            
            # Add to git
            git add "$filename"
            
            echo "✅ Added $filename to wiki"
          fi
        done
        
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️  No changes to commit"
        else
          # Commit changes
          git commit -m "📚 Update wiki content from main repository

          Updated wiki pages:
          $(git diff --staged --name-only | sed 's/^/- /')
          
          Auto-generated by GitHub Actions
          Source: ${{ github.sha }}"
          
          # Push changes
          git push origin master
          
          echo "🚀 Wiki updated successfully!"
        fi

    - name: Create wiki index if needed
      if: steps.check_wiki.outputs.wiki_exists == 'true'
      run: |
        cd wiki-repo
        
        # Check if Home.md exists, if not create a basic one
        if [ ! -f "Home.md" ]; then
          echo "📄 Creating Home.md..."
          cat > Home.md << 'EOF'
        # Gopnik Wiki

        Welcome to the Gopnik community wiki! This is a collaborative space where users and developers can share knowledge, examples, and best practices.

        ## 📚 Available Pages

        - [Installation Guide](Installation-Guide): Step-by-step installation instructions
        - [Data Models Guide](Data-Models-Guide): Complete guide to Gopnik's data structures
        - [AI Training Guide](AI-Training-Guide): Comprehensive AI model training procedures

        ## 🤝 Contributing

        This wiki is maintained by the community. Anyone can contribute by editing pages and adding examples.

        ## 📞 Getting Help

        - [GitHub Discussions](https://github.com/happy2234/gopnik/discussions): Ask questions and get help
        - [Issue Tracker](https://github.com/happy2234/gopnik/issues): Report bugs and request features
        - [Documentation](https://happy2234.github.io/gopnik/): Official documentation
        EOF
          
          git add Home.md
          git commit -m "📝 Create initial Home.md for wiki"
          git push origin master
          
          echo "✅ Created Home.md"
        fi

    - name: Generate wiki summary
      if: steps.check_wiki.outputs.wiki_exists == 'true'
      run: |
        cd wiki-repo
        
        echo "📊 Wiki Summary:"
        echo "==============="
        
        # List all wiki pages
        echo "📄 Available Pages:"
        for file in *.md; do
          if [ -f "$file" ]; then
            page_name=$(echo "$file" | sed 's/\.md$//' | sed 's/-/ /g')
            echo "  - $page_name ($file)"
          fi
        done
        
        echo ""
        echo "🔗 Wiki URL: https://github.com/${{ github.repository }}/wiki"
        echo "📝 Edit URL: https://github.com/${{ github.repository }}/wiki/_new"
        
        # Check wiki accessibility
        echo ""
        echo "🔍 Verifying wiki accessibility..."
        if curl -s -o /dev/null -w "%{http_code}" "https://github.com/${{ github.repository }}/wiki" | grep -q "200"; then
          echo "✅ Wiki is publicly accessible"
        else
          echo "⚠️  Wiki may not be publicly accessible yet (this is normal for new wikis)"
        fi

    - name: Update repository with wiki status and push
      if: steps.check_wiki.outputs.wiki_exists == 'true'
      run: |
        # Create a status file
        cat > wiki-status.json << EOF
        {
          "wiki_enabled": true,
          "last_updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "pages_count": $(ls wiki-repo/*.md 2>/dev/null | wc -l),
          "wiki_url": "https://github.com/${{ github.repository }}/wiki",
          "auto_sync": true,
          "status": "active"
        }
        EOF
        
        # Configure git
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        
        # Add status file
        git add wiki-status.json
        
        # Only commit and push if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "📊 Update wiki status

          - Wiki setup completed successfully
          - $(ls wiki-repo/*.md 2>/dev/null | wc -l) pages available
          - Auto-sync enabled via GitHub Actions"
          
          # Pull latest changes before pushing to handle any conflicts
          git pull origin ${{ github.ref_name }} --rebase
          git push origin ${{ github.ref_name }}
        else
          echo "No changes to commit for wiki status"
        fi

    - name: Post setup instructions
      if: steps.check_wiki.outputs.wiki_exists == 'true'
      run: |
        echo ""
        echo "🎉 Wiki Setup Complete!"
        echo "======================"
        echo ""
        echo "📖 Your wiki is now available at:"
        echo "   https://github.com/${{ github.repository }}/wiki"
        echo ""
        echo "📝 To edit wiki pages:"
        echo "   1. Visit the wiki URL above"
        echo "   2. Click 'Edit' on any page"
        echo "   3. Make your changes and save"
        echo ""
        echo "🔄 Auto-sync is enabled:"
        echo "   - Changes to wiki/ folder in main repo will auto-update the wiki"
        echo "   - Manual wiki edits will be preserved"
        echo ""
        echo "📚 Available pages:"
        cd wiki-repo
        for file in *.md; do
          if [ -f "$file" ]; then
            page_name=$(echo "$file" | sed 's/\.md$//' | sed 's/-/ /g')
            echo "   - $page_name"
          fi
        done