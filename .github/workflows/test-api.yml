name: Test REST API

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/gopnik/interfaces/api/**'
      - 'tests/test_api_*.py'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/gopnik/interfaces/api/**'
      - 'tests/test_api_*.py'
      - 'pyproject.toml'

jobs:
  test-api:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[web,dev]
        
        # Verify httpx is installed
        python -c "import httpx; print(f'httpx version: {httpx.__version__}')"
        
        # Verify FastAPI TestClient works
        python -c "from fastapi.testclient import TestClient; print('FastAPI TestClient available')"

    - name: Test API structure
      run: |
        python -m pytest tests/test_api_app.py -v

    - name: Test CLI API command
      run: |
        python -m pytest tests/test_cli_api_command.py -v

    - name: Test API server startup
      run: |
        # Start API server in background
        python -c "
        import threading
        import time
        import requests
        from src.gopnik.interfaces.api.app import create_app
        import uvicorn
        
        app = create_app()
        
        def run_server():
            uvicorn.run(app, host='127.0.0.1', port=8001, log_level='error')
        
        server_thread = threading.Thread(target=run_server, daemon=True)
        server_thread.start()
        
        # Wait for server to start
        time.sleep(3)
        
        # Test health endpoint
        try:
            response = requests.get('http://127.0.0.1:8001/api/v1/health', timeout=5)
            assert response.status_code == 200
            data = response.json()
            assert 'status' in data
            print(f'✅ API server test passed: {data[\"status\"]}')
        except Exception as e:
            print(f'❌ API server test failed: {e}')
            exit(1)
        "

    - name: Test OpenAPI documentation
      run: |
        python -c "
        import threading
        import time
        import requests
        from src.gopnik.interfaces.api.app import create_app
        import uvicorn
        
        app = create_app()
        
        def run_server():
            uvicorn.run(app, host='127.0.0.1', port=8002, log_level='error')
        
        server_thread = threading.Thread(target=run_server, daemon=True)
        server_thread.start()
        
        # Wait for server to start
        time.sleep(3)
        
        # Test OpenAPI endpoints
        endpoints = [
            '/openapi.json',
            '/docs',
            '/redoc'
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(f'http://127.0.0.1:8002{endpoint}', timeout=5)
                assert response.status_code == 200
                print(f'✅ {endpoint} accessible')
            except Exception as e:
                print(f'❌ {endpoint} failed: {e}')
                exit(1)
        
        print('✅ All API documentation endpoints accessible')
        "

  test-api-integration:
    runs-on: ubuntu-latest
    needs: test-api

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[web,dev]
        pip install requests

    - name: Test API integration
      run: |
        python -c "
        import threading
        import time
        import requests
        import json
        from src.gopnik.interfaces.api.app import create_app
        import uvicorn
        
        app = create_app()
        
        def run_server():
            uvicorn.run(app, host='127.0.0.1', port=8003, log_level='error')
        
        server_thread = threading.Thread(target=run_server, daemon=True)
        server_thread.start()
        
        # Wait for server to start
        time.sleep(3)
        
        base_url = 'http://127.0.0.1:8003'
        
        # Test health endpoint
        response = requests.get(f'{base_url}/api/v1/health')
        assert response.status_code == 200
        health = response.json()
        print(f'Health check: {health[\"status\"]}')
        
        # Test status endpoint
        response = requests.get(f'{base_url}/api/v1/status')
        assert response.status_code == 200
        status = response.json()
        assert status['service'] == 'gopnik-api'
        print('Status check: OK')
        
        print('✅ API integration tests passed')
        "

  test-cli-integration:
    runs-on: ubuntu-latest
    needs: test-api

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[web,dev]

    - name: Test CLI API command
      run: |
        # Test CLI help
        python -m gopnik.interfaces.cli.main api --help
        
        # Test CLI argument parsing
        python -c "
        from src.gopnik.interfaces.cli.main import GopnikCLI
        cli = GopnikCLI()
        parser = cli.create_parser()
        args = parser.parse_args(['api', '--host', '0.0.0.0', '--port', '8080'])
        assert args.command == 'api'
        assert args.host == '0.0.0.0'
        assert args.port == 8080
        print('✅ CLI API command parsing works')
        "

    - name: Test gopnik-api entry point
      run: |
        # Test that the entry point is available
        python -c "
        import pkg_resources
        entry_points = pkg_resources.get_entry_map('gopnik')
        console_scripts = entry_points.get('console_scripts', {})
        assert 'gopnik-api' in console_scripts
        print('✅ gopnik-api entry point available')
        "